.\"	$Id$
.\"
.\" Copyright (c) 2019 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt SQLBOX_CLOSE 3
.Os
.Sh NAME
.Nm sqlbox_close
.Nd close a database
.Sh LIBRARY
.Lb sqlbox
.Sh SYNOPSIS
.In stddef.h
.In sqlbox.h
.Ft int
.Fo sqlbox_open
.Fa "struct sqlbox *box"
.Fa "size_t id"
.Fc
.Sh DESCRIPTION
Close a database with the non-zero
.Fa id
as returned from
.Xr sqlbox_open 3 .
The caller must have a role capable of opening and closing the given
database source.
Once closed, subsequent calls to
.Fn sqlbox_close
with the same identifier will fail.
.Pp
If
.Fn sqlbox_close
is not called, the database will automatically be closed with
.Xr sqlbox_free 3 .
This is not considered an error, as a common usage pattern is a role
with permission opening the database, shedding its role, then the close
being relegated to the full destruction of the box.
.Sh RETURN VALUES
Returns zero if communication with the box fails or
.Fa id
is zero.
.Pp
If closing the database fails (not open or does not exist, statements
not finalised), subsequent
.Fa box
access will fail.
Use
.Xr sqlbox_ping 3
to check explicitly.
.\" For sections 2, 3, and 9 function return values only.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.\" .Sh FILES
.\" .Sh EXIT STATUS
.\" For sections 1, 6, and 8 only.
.Sh EXAMPLES
To simply open and close an in-memory database:
.Bd -literal
struct sqlbox *p;
struct sqlbox_src srcs[] = {
  { .fname = (char *)":memory:",
    .mode = SQLBOX_SRC_RWC },
};
struct sqlbox_cfg cfg;
size_t id;

memset(&cfg, 0, sizeof(struct sqlbox_cfg));
cfg.msg.func_short = warnx;
cfg.srcs.srcsz = 1;
cfg.srcs.srcs = srcs;
if ((p = sqlbox_alloc(&cfg)) == NULL)
  errx(EXIT_FAILURE, "sqlbox_alloc");
if (!(id = sqlbox_open(p, 0)))
  errx(EXIT_FAILURE, "sqlbox_open");
/* Perform work... */
if (!sqlbox_close(p, id))
  errx(EXIT_FAILURE, "sqlbox_close");
sqlbox_free(p);
.Ed
.Pp
To let
.Xr sqlbox_free 3
handle closing the database for role-shedding:
.Bd -literal
struct sqlbox *p;
struct sqlbox_src srcs[] = {
  { .fname = (char *)":memory:",
    .mode = SQLBOX_SRC_RWC },
};
struct sqlbox_role roles[] = {
  { .roles = (size_t[]){ 0, 1 },
    .rolesz = 2,
    .stmtsz = 0,
    .srcs = (size_t[]){ 0 },
    .srcsz = 1 },
  { .rolesz = 0,
    .stmtsz = 0,
    .srcsz = 0 }
};
struct sqlbox_cfg cfg;
size_t id;

memset(&cfg, 0, sizeof(struct sqlbox_cfg));
cfg.msg.func_short = warnx;
cfg.srcs.srcsz = 1;
cfg.srcs.srcs = srcs;
cfg.roles.roles = roles;
cfg.roles.rolesz = 2;
cfg.roles.defrole = 0;
if ((p = sqlbox_alloc(&cfg)) == NULL)
  errx(EXIT_FAILURE, "sqlbox_alloc");
if (!(id = sqlbox_open(p, 0)))
  errx(EXIT_FAILURE, "sqlbox_open");
if (!sqlbox_role(p, 1))
  errx(EXIT_FAILURE, "sqlbox_role");
/* Perform work... */
sqlbox_free(p);
.Ed
.Pp
In the last example, the default role is able to transition into the new
role, which is not able to close the database.
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.\" .Sh ERRORS
.\" For sections 2, 3, 4, and 9 errno settings only.
.Sh SEE ALSO
.Xr sqlbox_open 3 ,
.Xr sqlbox_ping 3
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
.\" .Sh SECURITY CONSIDERATIONS
.\" Not used in OpenBSD.
