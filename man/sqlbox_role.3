.\"	$Id$
.\"
.\" Copyright (c) 2019 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt SQLBOX_ROLE 3
.Os
.Sh NAME
.Nm sqlbox_role
.Nd change role of sqlbox context
.Sh LIBRARY
.Lb sqlbox
.Sh SYNOPSIS
.In stddef.h
.In sqlbox.h
.Ft void
.Fo sqlbox_role
.Fa "struct sqlbox *box"
.Fa "size_t role"
.Fc
.Sh DESCRIPTION
Change the active role of
.Fa box
to
.Fa role ,
.Pp
Changing to the current role has no effect.
Roles are given in
.Vt struct sqlbox_role
to
.Xr sqlbox_alloc 3 .
Role transition is given in the
.Va roles
array indicating which roles may transition into which other roles.
The value for self-transition is ignored: self-transition is a noop.
.Sh RETURN VALUES
Returns zero if communication with
.Fa box
fails.
Otherwise, returns non-zero.
.Pp
If
.Fa role
is not a valid role, no roles have been configured, or the current role
does not have permission to transition to it, subsequent
.Fa box
access will fail.
Use
.Xr sqlbox_ping 3
to check explicitly.
.Pp
If
.Fn sqlbox_role
fails,
.Fa box
is no longer accessible beyond
.Xr sqlbox_ping 3
and
.Xr sqlbox_free 3 .
.\" For sections 2, 3, and 9 function return values only.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.\" .Sh FILES
.\" .Sh EXIT STATUS
.\" For sections 1, 6, and 8 only.
.Sh EXAMPLES
To transition from one
.Qq privileged
role into another
.Qq unprivileged
role (which cannot further transition nor open a database):
.Bd -literal
struct sqlbox *p;
struct sqlbox_cfg cfg;
struct sqlbox_src srcs[] = {
  { .fname = (char *)":memory:",
    .mode = SQLBOX_SRC_RWC },
};
struct sqlbox_role roles[] = {
  { .rolesz = 2,
    .roles = (size_t[]){ 1, 0 },
    .stmtsz = 0,
    .srcsz = 1,
    .srcs = (size_t[]){ 0 } },
  { .rolesz = 0,
    .stmtsz = 0,
    .srcsz = 0 }
};
memset(&cfg, 0, sizeof(struct sqlbox_cfg));
cfg.msg.func_short = warnx;
cfg.roles.rolesz = 2;
cfg.roles.roles = roles;
cfg.roles.rolesz = 1;
cfg.roles.roles = srcs;
cfg.roles.defrole = 0;

if ((p = sqlbox_alloc(&cfg)) == NULL)
  errx(EXIT_FAILURE, "sqlbox_alloc");
if (!(id = sqlbox_open(p, 0)))
  errx(EXIT_FAILURE, "sqlbox_open");
if (!sqlbox_role(p, 1))
  errx(EXIT_FAILURE, "sqlbox_role");
/* Now operate as the "unprivileged" role. */
/* The database will be closed out automatically. */
sqlbox_free(p);
.Ed
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.\" .Sh ERRORS
.\" For sections 2, 3, 4, and 9 errno settings only.
.Sh SEE ALSO
.Xr sqlbox_ping 3
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
.\" .Sh SECURITY CONSIDERATIONS
.\" Not used in OpenBSD.
