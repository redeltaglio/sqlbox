.\"	$Id$
.\"
.\" Copyright (c) 2019 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt SQLBOX_STEP 3
.Os
.Sh NAME
.Nm sqlbox_step
.Nd execute a prepared statement
.Sh LIBRARY
.Lb sqlbox
.Sh SYNOPSIS
.In stddef.h
.In sqlbox.h
.Ft const struct sqlbox_parmset *
.Fo sqlbox_step
.Fa "struct sqlbox *box"
.Fa "size_t id"
.Fc
.Sh DESCRIPTION
Executes a statement
.Fa id
prepared with
.Xr sqlbox_prepare_bind 3 .
It returns a result set:
.Bd -literal
struct sqlbox_parm {
  union {
    double fparm; /* SQLBOX_PARM_FLOAT */
    int64_t iparm; /* SQLBOX_PARM_INT */
    const char *sparm; /* SQLBOX_PARM_STRING */
    const void *bparm; /* SQLBOX_PARM_BLOB */
  };
  enum sqlbox_parmt type;
  size_t sz;
};

struct sqlbox_parmset {
  struct sqlbox_parm *ps;
  size_t psz;
};
.Ed
.Pp
The set consists of values from each column of the returned data in the
underlying type of the value.
If the statement does not return any column (such as a
.Li CREATE TABLE
or
.Li UPDATE ,
or if there are no more rows in a
.Li SELECT
statement), the result set will be empty: the
.Va psz
will be zero.
The result set as a whole, including the memory allocated for each
.Va sparm
and
.Va bparm
column, is only valid until the next
.Fn sqlbox_step
or
.Xr sqlbox_finalise 3 .
.Pp
For queries, the types set in
.Va type
are those set by the database schema, not the corresponding insertion
statements.
To convert between types (e.g., integers to strings), use the standard
.Xr snprintf 3 ,
.Xr strtonum 3 ,
and so on.
.Ss SQLite3 Implementation
Uses
.Xr sqlite3_step 3
to step through, randomly backing off on return of
.Dv SQLITE_BUSY ,
.Dv SQLITE_LOCKED ,
or
.Dv SQLITE_PROTOCOL ,
and failing if not returning
.Dv SQLITE_DONE
or
.Dv SQLITE_ROW .
.Sh RETURN VALUES
Returns the results of the query or
.Dv NULL
on failure.
Failure covers situations like failure to communicate with the box,
stepping after the last result has been returned, or database error.
.Pp
If
.Fn sqlbox_step
fails,
.Fa box
is no longer accessible beyond
.Xr sqlbox_ping 3
and
.Xr sqlbox_free 3 .
.\" For sections 2, 3, and 9 function return values only.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.\" .Sh FILES
.\" .Sh EXIT STATUS
.\" For sections 1, 6, and 8 only.
.Sh EXAMPLES
The following opens a database
.Pa db.db
and inserts an integer value into it.
It depends upon
.Xr sqlbox_free 3
to close out the database.
It assumes that the
.Li bar
column has been initialised as an SQL type
.Li INTEGER .
.Bd -literal
size_t dbid, stmtid;
struct sqlbox *p;
struct sqlbox_cfg cfg;
struct sqlbox_src srcs[] = {
  { .fname = (char *)"db.db",
    .mode = SQLBOX_SRC_RW }
};
struct sqlbox_pstmt pstmts[] = {
  { .stmt = (char *)"INSERT INTO foo (bar) VALUES (?)" },
};
struct sqlbox_parm parms[] = {
  { .iparm = 10,
    .type = SQLBOX_PARM_INT },
};
const struct sqlbox_parmset *res;

memset(&cfg, 0, sizeof(struct sqlbox_cfg));
cfg.msg.func_short = warnx;
cfg.srcs.srcsz = 1;
cfg.srcs.srcs = srcs;
cfg.stmts.stmtsz = 1;
cfg.stmts.stmts = pstmts;

if ((p = sqlbox_alloc(&cfg)) == NULL)
  errx(EXIT_FAILURE, "sqlbox_alloc");
if (!(dbid = sqlbox_open(p, 0)))
  errx(EXIT_FAILURE, "sqlbox_open");
if (!(stmtid = sqlbox_prepare_bind(p, dbid, 1, 1, parms)))
  errx(EXIT_FAILURE, "sqlbox_prepare_bind");
if ((res = sqlbox_step(p, stmtid)) == NULL)
  errx(EXIT_FAILURE, "sqlbox_step");
/* The result will have zero columns. */
if (!sqlbox_finalise(p, stmtid))
  errx(EXIT_FAILURE, "sqlbox_finalise");

sqlbox_free(p);
.Ed
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.\" .Sh ERRORS
.\" For sections 2, 3, 4, and 9 errno settings only.
.Sh SEE ALSO
.Xr sqlbox_finalise 3 ,
.Xr sqlbox_open 3
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
.\" .Sh SECURITY CONSIDERATIONS
.\" Not used in OpenBSD.
